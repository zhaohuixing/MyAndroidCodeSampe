package com.xingzhaohui.xingtest.mainmodule.model;

/**
 * Created by zhaohuixing on 2017-03.
 */

import android.content.Context;
import android.content.ContentValues;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import java.util.*;

import com.xingzhaohui.xingtest.mainmodule.data.CustomerRecord;

public class AppCustomerDBProvider extends AppDataBaseProvider {
    // All Static variables
    // Database Version
    private static final int CUSTOMERDB_VERSION = 1;

    // Database Name
    private static final String CUSTOMERDB_NAME = "xappcustomer";

    // Customer table name
    private static final String CUSTOMERDB_CUSTMER_TABLE = "xcustomers";

    // Customer Table Columns names
    private static final String KEY_ID = "id";  //The prnary id is created by Db self automatically during inserting record
    private static final String KEY_NAME = "name";
    private static final String KEY_ADDRESS = "address";
    private static final String KEY_PHONE = "phone";
    private static final String KEY_EMAIL = "email";

    public AppCustomerDBProvider(Context context, SQLiteDatabase.CursorFactory factory) {
        super(context, CUSTOMERDB_NAME, CUSTOMERDB_CUSTMER_TABLE, CUSTOMERDB_VERSION, factory);
    }

    // Creating Tables
    @Override
    public void onCreate(SQLiteDatabase db) {
        String CREATE_CUSTOMER_TABLE = "CREATE TABLE " + CUSTOMERDB_CUSTMER_TABLE + "("
                + KEY_ID + " INTEGER PRIMARY KEY,"
                + KEY_NAME + " TEXT,"
                + KEY_ADDRESS + " TEXT,"
                + KEY_PHONE + " TEXT,"
                + KEY_EMAIL + " TEXT"
                + ")"  ;
        db.execSQL(CREATE_CUSTOMER_TABLE);
    }

    public void addCustomer(CustomerRecord customer) {
        SQLiteDatabase db = this.getWritableDatabase();

        ContentValues values = new ContentValues();
        //values.put(KEY_ID, AppDataBaseProvider.CreateGenericIntegerKey()); // Customer ID generated by DB self
        values.put(KEY_NAME, customer.m_CustomerName); // Customer Name
        values.put(KEY_ADDRESS, customer.m_CustomerAddress); // Customer Address
        values.put(KEY_PHONE, customer.m_CustomerPhone); // Customer Phone
        values.put(KEY_EMAIL, customer.m_CustomerEmail); // Customer Email

        // Inserting Row
        db.insert(CUSTOMERDB_CUSTMER_TABLE, null, values);
        db.close(); // Closing database connection
    }

    // Getting customer Count
    public int getCustomerCount() {
        String countQuery = "SELECT  * FROM " + CUSTOMERDB_CUSTMER_TABLE;
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery(countQuery, null);
        //cursor.close(); wrong can not close cursor for the next call

        // return count
        return cursor.getCount();
    }

    // Getting single customer
    public CustomerRecord getCustomer(int id) {
        SQLiteDatabase db = this.getReadableDatabase();

        Cursor cursor = db.query(CUSTOMERDB_CUSTMER_TABLE,
                                new String[] { KEY_ID, KEY_NAME, KEY_ADDRESS, KEY_PHONE, KEY_EMAIL },
                                KEY_ID + "=?", new String[] { String.valueOf(id) },
                                null, null, null, null);
        if (cursor != null)
            cursor.moveToFirst();

        CustomerRecord customer = new CustomerRecord();
        customer.m_CustomerID = Integer.parseInt(cursor.getString(0));
        customer.m_CustomerName = cursor.getString(1);
        customer.m_CustomerAddress = cursor.getString(2);
        customer.m_CustomerPhone = cursor.getString(3);
        customer.m_CustomerEmail = cursor.getString(4);

        return customer;
    }

    public Vector<CustomerRecord> getAllCustomers() {
        Vector<CustomerRecord> customerList = new Vector<CustomerRecord>();
        // Select All Query
        String selectQuery = "SELECT  * FROM " + CUSTOMERDB_CUSTMER_TABLE;

        SQLiteDatabase db = this.getWritableDatabase();
        Cursor cursor = db.rawQuery(selectQuery, null);

        // looping through all rows and adding to list
        if (cursor.moveToFirst()) {
            do {
                CustomerRecord customer = new CustomerRecord();
                customer.m_CustomerID = Integer.parseInt(cursor.getString(0));
                customer.m_CustomerName = cursor.getString(1);
                customer.m_CustomerAddress = cursor.getString(2);
                customer.m_CustomerPhone = cursor.getString(3);
                customer.m_CustomerEmail = cursor.getString(4);
                // Adding contact to list
                customerList.add(customer);
            } while (cursor.moveToNext());
        }

        // return contact list
        return customerList;
    }

    public List<CustomerRecord> getAllCustomersList() {
        List<CustomerRecord> customerList = new ArrayList<CustomerRecord>();
        // Select All Query
        String selectQuery = "SELECT  * FROM " + CUSTOMERDB_CUSTMER_TABLE;

        SQLiteDatabase db = this.getWritableDatabase();
        Cursor cursor = db.rawQuery(selectQuery, null);

        // looping through all rows and adding to list
        if (cursor.moveToFirst()) {
            do {
                CustomerRecord customer = new CustomerRecord();
                customer.m_CustomerID = Integer.parseInt(cursor.getString(0));
                customer.m_CustomerName = cursor.getString(1);
                customer.m_CustomerAddress = cursor.getString(2);
                customer.m_CustomerPhone = cursor.getString(3);
                customer.m_CustomerEmail = cursor.getString(4);
                // Adding contact to list
                customerList.add(customer);
            } while (cursor.moveToNext());
        }

        // return contact list
        return customerList;
    }

    public void deleteCustomer(CustomerRecord customer) {
        SQLiteDatabase db = this.getWritableDatabase();
        db.delete(CUSTOMERDB_CUSTMER_TABLE, KEY_ID + " = ?",
                new String[] { String.valueOf(customer.m_CustomerID) });
        db.close();
    }

    public int updateCustomer(CustomerRecord customer) {
        SQLiteDatabase db = this.getWritableDatabase();

        ContentValues values = new ContentValues();
        values.put(KEY_NAME, customer.m_CustomerName); // Customer Name
        values.put(KEY_ADDRESS, customer.m_CustomerAddress); // Customer Address
        values.put(KEY_PHONE, customer.m_CustomerPhone); // Customer Phone
        values.put(KEY_EMAIL, customer.m_CustomerEmail); // Customer Email

        // updating row
        return db.update(CUSTOMERDB_CUSTMER_TABLE, values, KEY_ID + " = ?", new String[] { String.valueOf(customer.m_CustomerID) });
    }
}
